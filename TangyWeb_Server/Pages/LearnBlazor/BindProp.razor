@page "/learnBlazor/bindProperties"

<h3>Product</h3>
Name: @product.Name
<br />

Active: @product.isActive
<br />

Price: @product.Price
<br />

This Product is: @(product.isActive ? "Active" : "InActive")
<br/>

Property Selected: @selectedProp
@if (!String.IsNullOrWhiteSpace(selectedProp))
{
	<p>
		Property Value: @product.ProductProperties.FirstOrDefault(x => x.Key == selectedProp).Value
	</p>	
}
<br />
<br />

Active:
<input type="checkbox" @bind-value="@product.isActive" checked="@(product.isActive ? "checked" : null)" />
<br />

Price:
<input type="number" @bind-value="@product.Price" @bind-value:event="oninput" />
<br />

Product Properties:
<select @bind="selectedProp">
	@foreach (var prop in product.ProductProperties)
	{
		<option value="@prop.Key">@prop.Key</option>
	}
</select>

@*Alternative way*@
@*Price:
	<input type="number" @bind="@product.Price" @bind:event="oninput" />*@

@code {
	private string selectedProp = "";

	Tangy_Models.LearnBlazorModels.Demo_Product product = new()
		{
			Id = 1,
			Name = "Rose Candle",
			isActive = true,
			Price = 10.99,

			ProductProperties = new List<Tangy_Models.LearnBlazorModels.Demo_ProductProperties>()
			{
				new Tangy_Models.LearnBlazorModels.Demo_ProductProperties { Id = 1, Key = "Color", Value = "Black" },
				new Tangy_Models.LearnBlazorModels.Demo_ProductProperties { Id = 2, Key = "Flavor", Value = "Rose Jasmine" },
				new Tangy_Models.LearnBlazorModels.Demo_ProductProperties { Id = 3, Key = "Size", Value = "20oz" },
			}
		};
}
