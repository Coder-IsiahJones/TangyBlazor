@page "/learnBlazor/bindProperties"

<h2 class="text-success">Individual Product</h2>

<div class="row">
	<div class="col-6 border p-3">
		<h3 class="text-primary">Product Playground</h3>
		<hr />

		<div class="form-group pb-2">
			<label>Active:</label>
			<input class="form-check-input" type="checkbox" @bind-value="@Product.isActive" checked="@(Product.isActive ? "checked" : null)" />
		</div>

		<div class="form-group pb-2">
			Price:
			<input class="form-control" type="number" @bind-value="@Product.Price" @bind-value:event="oninput" />
		</div>

		<div class="form-group pb-2">
			Product Properties:
			<select class="form-control" @bind="selectedProp">
				@foreach (var prop in Product.ProductProperties)
				{
					<option value="@prop.Key">@prop.Key</option>
				}
			</select>
		</div>
	</div>

	<div class="col-6 border p-3">
		<h3 class="text-primary">Product Summary</h3>
		<hr />

		<div>
			Name: @Product.Name
		</div>

		<div>
			Active: @Product.isActive
		</div>

		<div>
			Price: @Product.Price
		</div>

		<div>
			This Product is: @(Product.isActive ? "Active" : "InActive")
		</div>

		<div>
			Property Selected: @selectedProp
			@if (!String.IsNullOrWhiteSpace(selectedProp))
			{
				<p>
					Property Value: @Product.ProductProperties.FirstOrDefault(x => x.Key == selectedProp).Value
				</p>
			}
		</div>
	</div>
</div>

<div class="col-12 border mt-4 p-3">
	<h2 class="text-success">Product Table</h2>
	<table class="table table-striped">
		<tbody>
			@foreach (var prod in Products)
			{
				<tr>
					<td>
						<input class="form-control" type="text" @bind-value="@prod.Name" @bind-value:event="oninput" />
					</td>
					<td>
						<input class="form-control" type="number" @bind-value="@prod.Price" @bind-value:event="oninput" />
					</td>
					<td>
						<input class="form-check-input" type="checkbox" @bind-value="@prod.isActive" checked="@(prod.isActive ? "checked" : null)" />
					</td>
				</tr>

			}
		</tbody>
	</table>

	<h2 class="text-primary">Product Summary</h2>
	@foreach (var prod in Products)
	{
		<p>
			@prod.Name [@prod.Price] is @(prod.isActive ? "Active" : "InActive")
		</p>
	}
</div>


@code {
	private string selectedProp = "";

	Demo_Product Product = new()
		{
			Id = 1,
			Name = "Rose Candle",
			isActive = true,
			Price = 10.99,

			ProductProperties = new List<Demo_ProductProperties>()
			{
				new Demo_ProductProperties { Id = 1, Key = "Color", Value = "Black" },
				new Demo_ProductProperties { Id = 3, Key = "Size", Value = "20oz" },
				new Demo_ProductProperties { Id = 2, Key = "Flavor", Value = "Rose Jasmine" },
			}
		};

	List<Demo_Product> Products = new();

	protected override void OnInitialized()
	{
		Products.Add(new()
			{
				Id = 1,
				Name = "Midnight Blaze",
				isActive = false,
				Price = 5.99,
				ProductProperties = new()
				{
					new Demo_ProductProperties { Id = 1, Key = "Flavor", Value = "Rose" },
					new Demo_ProductProperties { Id = 2, Key = "Size", Value = "20oz" },
					new Demo_ProductProperties { Id = 3, Key = "Color", Value = "Purple" }
				}
			});

		Products.Add(new()
			{
				Id = 2,
				Name = "Blossom Lily",
				isActive = true,
				Price = 7.99,
				ProductProperties = new()
				{
					new Demo_ProductProperties { Id = 1, Key = "Flavor", Value = "Lily" },
					new Demo_ProductProperties { Id = 2, Key = "Size", Value = "18oz" },
					new Demo_ProductProperties { Id = 3, Key = "Color", Value = "White" }
				}
			});
	}
}

@*Alternative way*@
@*Price:
	<input type="number" @bind="@product.Price" @bind:event="oninput" />*@